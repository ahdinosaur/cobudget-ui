expect = require('test').expect
Promise = require('bluebird')
sinon = require('sinon')

Store = require('../store.coffee')

describe "BudgetsStore", ->
  Client = undefined
  store = undefined

  beforeEach ->
    Client = class
      get: sinon.stub()
    store = new Store({ Client })

  it "should load all budgets", (done) ->
    budgets = [{
      name: "such"
    }, {
      name: "very"
    }, {
      name: "wow"
    }]
    store.client.get.returns({
      then: (cb) ->
        cb({}, budgets)
        return @
      caught: sinon.stub()
    })
    
    expect(store.loading).to.be.true
    expect(store.error).to.be.null
    expect(store.budgets).to.deep.equal([])
    store.on 'change', ->
      expect(store.loading).to.be.false
      expect(store.error).to.be.null
      expect(store.budgets).to.deep.equal(budgets)
      done()
    store.load()
    expect(store.client.get.withArgs().calledOnce).to.be.true
